创建结构，创建结构对象，初始化，使用
```
struct 结构名称
{
	结构里包括的成员
	创建成员的格式：类型 变量名;
}

在需要使用该结构的函数里
{
	结构名称 结构变量名称
	结构变量名称.该结构里的成员
}
```
具体例子如下
```
struct inflatable
{
	char name[20];
	float volume;
	double price;
}

int main()
{
	...
	inflatable hat;
	sturct inflatable woopie_cushion;//可以省略struct
	//可以单个赋值
	hat.volume
	woopie_cushion.price
	//可以整体赋值
	inflateble pal = 
	{
		"audacious",
		3.12,
		32.99
	};
	//也可以写作{"audacious",3.12,32.99 };
	//有些编译器里要用static inflatable pal = 这种方式
	...
}
```
结构体声明可以放在所有函数体外，是外部声明，也可以放在某个函数体内，是内部声明。外部声明在这个程序内均可使用，内部声明只能在该函数体内用。

基于某个结构体创建对象之后，未经初始化，不能用，但是如果进行了局部初始化，那么余下的默认为0。

可以把创建结构体变量，甚至赋值都放在创建结构体之后，如以下例子。
```
struct perks
{
	int key_number;
	char car[12];
}mr_smith, ms_jones;

struct perks
{
	int key_number;
	char car[12];
}mr_glitz=
{
	7,
	"packard"
};
```
但是建议分开，代码结构更清晰。

可以声明没有名称的结构类型，在结构体的末尾创建对象，但是无法在其他地方基于此函数体创建对象，所以本书不继续使用这种方法。

C++除了成员变量，还可以有成员函数，将在第10章进一步讨论。

可以根据结构体来创建数组，创建方式和其他对象一致，如下所示
```
inflatable guests[2];//这样就基于结构体创建了一个2个空间的数组

//可以外部输入来赋值
cin>>guests[1].volume;

//可以在创建的时候进行初始化
inflatable guests[2] = 
{
	{"bambi",0.5,21.99},
	{"godzilla",2000,565.99}
};
//类似数组array[2]={1,3};  所以内部用逗号，第一个大括号外用分号
```

位字段。可以规定每个成员占用的位数。
```
struct torgle_register
{
	unsigned int SN:4;
	unsigned int:4;
	bool goodin:1;
	bool goodtorgle:1;
};

void assign_st()
{
	torgle_register bouquet = { 14 };//bool类型是有输入即为1，无输入则为0
	cout << bouquet.SN << endl;
	cout << bouquet.goodin << endl;
	cout << bouquet.goodtorgle << endl;
}
```
