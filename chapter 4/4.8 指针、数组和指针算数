用两种方法给指针赋值，并对两个指针和数组进行展示内容、展示地址、加一后展示内容、展示地址等操作。
```

```
在以上代码中，对于数组表达式`stack[1]` ，编译器将该表达式看作`*(stack+1)` ，所以是先计算第二位的地址，再去取存在这个地址内的值。如果没有小括号，编译器会理解成取stack的内容，给这个内容加一。
数组名变成指针名也一样。
区别在于，指针名可以直接加减，操作的是地址，数组名不可以。

指针小结

指针和字符串

使用new创建动态结构
4.7节介绍了使用new创建动态数组，还可以用new创建动态结构。
```
inflateble *ptr = new inflatable;//未初始化
*ptr = grubnose;
或者
ptr = &grubnose;
```
但是因为指针记录的是地址，所以通过指针调用内容和普通对象有些不同。
前者使用箭头运算符，后者使用句点运算符。
```
#include<iostream>
using namespace std;

struct inflatable
{
	char name[20];
	float volume;
	double price;
};

int main()
{
	inflatable* ps = new inflatable;
	cout << "enter name of inflatable item ";
	cin.get(ps->name, 20);//也可以这么写cin.get((*ps).name, 20);
	cout << "enter the volume ";
	cin >> (*ps).volume;
	cout << "enter the price ";
	cin >> ps->price;

	cout << "name: " << ps->name << endl;
	cout << "volume: " << (*ps).volume << endl;
	cout << "price: " << ps->price << endl;
	
	delete ps;
}
```
内容用句点，指针用箭头。

使用new和delete来节约内存的示例
```
#include<iostream>
#include<cstring>
using namespace std;

char* getname(void);

int main()
{
	char* name;

	name = getname();//getname()返回一个char类型的指针，指针之间可以相互赋值？
	cout << name << " at " << (int*)name << endl;//Q：为何只能这样输出？这里的name不是一个指针吗？输出指针内容不是*name，输出其地址是name吗？
	//为什么是(int*)name？
	//cout << *name << " at " << name << endl;//这样只能输出字符串的首字母和全部字符串
	delete[] name;
}

char* getname(void)
{
	char temp[80];
	cout << "enter your last name ";
	cin >> temp;
	char* pn = new char[strlen(temp) + 1];
	strcpy_s(pn, strlen(temp) + 1, temp);

	return pn;
}
```

做了改动之后，pn里存储着值，但是地址不对劲。所以name根据混乱的地址找到的值也错了。
```
int main()
{
	char* name;

	name = getname();
	cout << *name << " at " << name << endl;
	
}

char* getname(void)
{
	char temp;
	cout << "enter your last name ";
	cin >> temp;
	char* pn;
	pn = &temp;
	cout << "temp is " << temp << endl;
	cout << "name is " << *pn << " at " << pn << endl;

	return pn;
}
```

自动存储、静态存储和动态存储，还有线程存储
自动存储和静态存储的内存都在栈中。不同的是，自动存储的变量（即auto）随着代码块结束而释放。先进的后释放。静态存储的变量在整个程序运行期间都存在。可以在函数外定义，或者使用static。
动态存储的内存在堆中，需要用delete来释放。不释放的话，会有内存泄漏，即在程序结束前，这一块内存都不能再调用。可以在一个函数中使用new分配一块空间，在另一个函数中使用delete释放这块空间。但是这种操作会使跟踪新分配内存的位置变得困难。
线程存储之后再介绍。
